from collections import deque
goal_state = (1, 2, 3, 4, 5, 6, 7, 8, 0)
initial_state = (2, 8, 3, 1, 6, 4, 7, 0, 5)
moves = {
    0: (1, 3),
    1: (0, 2, 4),
    2: (1, 5),
    3: (0, 4, 6),
    4: (1, 3, 5, 7),
    5: (2, 4, 8),
    6: (3, 7),
    7: (4, 6, 8),
    8: (5, 7)
}
def get_neighbors(state):
    zero_index = state.index(0)
    possible_moves = moves[zero_index]
    neighbors = []
    for move in possible_moves:
        neighbor = list(state)
        neighbor[zero_index], neighbor[move] = neighbor[move], neighbor[zero_index]
        neighbors.append(tuple(neighbor))
    return neighbors
def bfs(start_state, goal_state):
    visited = set()
    queue = deque([(start_state, [])])
    while queue:
        current_state, path = queue.popleft()
    if current_state == goal_state:
            return path
        visited.add(current_state)
        neighbors = get_neighbors(current_state)
         for neighbor in neighbors:
            if neighbor not in visited:
                queue.append((neighbor, path + [neighbor]))
    return None
# Solve the puzzle and print the path
path = bfs(initial_state, goal_state)
if path:
    print("Solution path:")
    for step, state in enumerate(path):
        print(f"Step {step + 1}: {state[:3]}\n          {state[3:6]}\n          {state[6:]}")
else:
    print("No solution found.")
